%% Author: Genghui Li (genghuili2-c@my.cityu.edu.hk)
%% Expensive Optimization via Surrogate-Assisted and Model-Free Evolutionary Optimization
%% IEEE Transactions on Systems, Man, and Cybernetics: Systems
clc;
clear;
warning off
format short e
warning off
maxFES=1000; % Maximum number of function evaluations
ProblemSet=[1,3:16];% Test F1, F3-F16 of cec2017 bound constrained optimization problems
fbias=ProblemSet*100; % The real best objective function value
Xmin=-100; % lower boundary 
Xmax=100; % upper boundary
D=[10,30,50,100];% Dimension of the test problems 
NP=60; % Population size: 60 for 10D; 40 for 30D;30 for 50D and 100D 
%% outcome and Fbest are used to save the result
outcome=[];
Fbest=[];
for d_index=1 % 1for 10D;2 for 30D;3 for 50D; and 4 for 100D
    for problem_index=1:1       
        problem=ProblemSet(problem_index);
        Function_value_error_NFE=[];
        for time_index=1:20
            str1=['problem=',num2str(problem_index),'  time=',num2str(time_index),'  d=',num2str(D(d_index))];
            disp(str1);
            start_time=tic; % Record the starting running time
           %% The initial population generated by LHS
            LHSsamples= lhsdesign(NP, D(d_index),'smooth','on');
            Data.x= Xmin+(Xmax-Xmin).*LHSsamples; 
            Data.y=cec17_func(Data.x',problem)';
           %% recorde the number of function evaluation and all evaluated data
            FES=NP;
            Pop=Data.x;
            Pop_fun_value=Data.y;         
           %% Parameter seting
            epsilon=1e-8*(Xmax-Xmin);         
            Fm(1)=0.5;
            CRm(1)=0.5;
            c=0.1;
            M=400; 
            alpha=0.6;
            K=5;
            Arc=[];  %% The archive of the solutions
            Arc_fun_value=[]; %% The archive of the objective function value of the solutions
           %% generation number
            t=1;  
            while FES<maxFES   
                  %% SF and SCR are used to save the successful parameters
                    SF=[];SCR=[];
                  %% count and s_count are used to calculate the optimization utility
                    count=0; % The number of offspring
                    s_count=0; % the number of successful offspring 
                  %% Sort population for best to worst
                    [Pop_fun_value,sortid]=sort(Pop_fun_value,'ascend');
                     Pop=Pop(sortid,:);
                  %% LAS-MoEO
                    for i=1:NP
                         if rand<(NP-i+1)/NP
                           count=count+1;                                            
                           Parent=[Pop;Arc];
                           Parent_fun_value=[Pop_fun_value;Arc_fun_value];
                           Parent_size=size(Parent,1);
                         %% Sort the parents from the best to the worst
                           [Parent_fun_value,Fun_sortid]=sort(Parent_fun_value,'ascend');
                           Parent=Parent(Fun_sortid,:);  
                         %% Generate offspring solution using MoOG
                           [F,CR] = randFCR(K*M, CRm(t),0.1, Fm(t),0.1);   
                           U=Generator_DE(i,Pop,Parent,Parent_size,Xmin*ones(1,D(d_index)),Xmax*ones(1,D(d_index)),D(d_index),F,CR,M);                                                                                                         
                         %% Construct the RBF model using newest available samples
                           Newest_size=min(K*size(Parent,1),length(Data.y)) ;
                           RBF_sample=Data.x(end-Newest_size+1:end,:);
                           RBF_sample_fun_value=Data.y(end-Newest_size+1:end);                                           
                           RBFpara = RBFCreate(RBF_sample,RBF_sample_fun_value, 'cubic');  
                        %% Predict the fitness of the offspring population U                          
                           RBFfun_U = RBFInterp(U, RBFpara);                            
                        %% Find the best promising offspring
                           [~,minid]=min(RBFfun_U);
                           new_x=U(minid,:);                          
                        %% Evaluate the offspring new_x if it meets the distance constraint.
                           d_new_x=min(pdist2(new_x,Data.x));  
                            if  d_new_x>epsilon
                                fun_new_x=cec17_func(new_x',problem);
                                FES=FES+1;                                                                                          
                                Data.x=[Data.x;new_x];
                                Data.y=[Data.y;fun_new_x];                         
                                if fun_new_x<Pop_fun_value(i) 
                                    s_count=s_count+1; 
                                 %% Archive update
                                    Arc=[Arc;Pop(i,:)];
                                    Arc_fun_value=[Arc_fun_value;Pop_fun_value(i)];
                                    if size(Arc,1)>NP
                                       Arc(1,:)=[];
                                       Arc_fun_value(1)=[];
                                    end
                                 %% Population update
                                    Pop(i,:)=new_x;
                                    Pop_fun_value(i)=fun_new_x;
                                 %% save the successful F and CR 
                                    SF=[SF;F(minid)];
                                    SCR=[SCR;CR(minid)]; 
                                end
                            end
                          %% Check the stopping condition
                            if FES>=maxFES
                              break;
                            end
                        end
                    end 
                  %% Update the paremeter for mF and mCR
                    if ~isempty(SF)
                        Fm(t+1)=(1-c)*Fm(t)+c*mean(SF);
                        CRm(t+1)=(1-c)*CRm(t)+c*mean(SCR);
                    else
                        Fm(t+1)=Fm(t);
                        CRm(t+1)=CRm(t);
                    end  
                  %% Calculate the optimization utility of LSA-MoEO
                    u(t)=s_count/count;
                    
                  %%  MF-SoEO 
                    if u(t)<=alpha && FES<maxFES 
                     %% Sort the population from the best to the worst
                         [Pop_fun_value,sortid]=sort(Pop_fun_value,'ascend');
                          Pop=Pop(sortid,:);
                          Xb=Pop(1,:); % The best solution in the population
                         for i=1:NP
                            if rand<i/NP
                             %% Generate offspring by using DE/best/1
                                Parent=[Pop;Arc];
                                R=randperm(size(Parent,1));
                                new_x=Xb+(-1+2*rand).*(Parent(R(1),:)-Parent(R(2),:));  
                                new_x= Repair(new_x, [Xmin*ones(1,D(d_index));Xmax*ones(1,D(d_index))]);
                             %% Evaluate the offspring new_x if it meets the distance constraint.
                                d_new_x=min(pdist2(new_x,Data.x)); 
                                if  d_new_x>epsilon
                                    fun_new_x=cec17_func(new_x',problem);
                                    FES=FES+1;                                 
                                    Data.x=[Data.x;new_x];
                                    Data.y=[Data.y;fun_new_x];                  
                                    if fun_new_x<Pop_fun_value(i)
                                   %% Archive update
                                       Arc=[Arc;Pop(i,:)];
                                       Arc_fun_value=[Arc_fun_value;Pop_fun_value(i)];
                                       if size(Arc,1)>NP
                                         Arc(1,:)=[];
                                         Arc_fun_value(1)=[];
                                       end
                                    %% Population update
                                       Pop(i,:)=new_x;
                                       Pop_fun_value(i)=fun_new_x;  
                                    end
                                end
                             %% Check the stopping condition
                                if FES>=maxFES
                                     break;
                                end
                           end
                        end 
                    end 
                    t=t+1;  
            end 
            Running_Time(time_index,problem_index,d_index)=toc(start_time); %% Running_time
            Data.y=Data.y-fbias(problem_index); %% function error value for all evaluated solutions
           %% Record the convergence curve for each run
            for r=1:maxFES
                Function_value_error_NFE(r,time_index)=min(Data.y(1:r));
            end
           %% Record the best function error value for each problem in each time
            outcome(time_index,problem_index,d_index)=Function_value_error_NFE(end,time_index)               
        end
       %% Record the average convergence curve for all runs 
        Fbest(:,problem_index,d_index)=mean(Function_value_error_NFE,2);
    end
end

%% Save the result
% save SAMFEOFbest Fbest
% save SAMFEOFoutcome outcome

 